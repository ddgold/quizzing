scalar Date
scalar Void

type FieldError {
	message: String!
	field: String!
}

# ----
# User
# ----
type User {
	id: String!
	nickname: String!
	email: String!
	access: Int!
}

type AuthResult {
	accessToken: String
	user: User
	errors: [FieldError!]
}

# -----
# Build
# -----
type Clue {
	answer: String!
	question: String!
}

input ClueInput {
	answer: String!
	question: String!
}

enum CategoryFormat {
	FIXED
	RANDOM
	SORTED
}

type Category {
	id: String!
	name: String!
	description: String!
	format: CategoryFormat!
	clues: [Clue!]!
	creator: User!
	created: Date!
	updated: Date!
}

type Board {
	id: String!
	name: String!
	description: String!
	categories: [Category!]!
	creator: User!
	created: Date!
	updated: Date!
}

union ResultObject = Board | Category

enum RecordType {
	BOARD
	CATEGORY
}

type FormResult {
	result: ResultObject
	errors: [FieldError!]
}

type QueryResult {
	result: ResultObject
	canEdit: Boolean
}

type SearchResult {
	result: [ResultObject!]
}

# ----
# Play
# ----
type Row {
	cols: [Boolean!]!
	value: Int!
}

type Game {
	id: String!
	name: String!
	categories: [String!]!
	rows: [Row!]!
	state: String!
	currentText: String
	started: Date!
}

# -------
# Queries
# -------
type Query {
	# User
	currentUser: User
	userByEmail(email: String!): User

	# Build
	boards(showAll: Boolean!): [Board!]!
	categories(showAll: Boolean!): [Category!]!
	recentRecords(type: RecordType!): [ResultObject!]!
	recordById(type: RecordType!, id: String!): QueryResult!
	recordSearch(type: RecordType!, name: String!): SearchResult!

	# Play
	games(filter: Int!): [Game!]!
	playGame(gameId: String!): Game!
}

# ---------
# Mutations
# ---------
type Mutation {
	# User
	login(email: String!, password: String!): AuthResult!
	logout: Boolean
	register(nickname: String!, email: String!, password: String!): AuthResult!

	# Build
	createRecord(type: RecordType!, name: String!): FormResult!
	updateBoard(id: String!, name: String!, description: String!, categoryIds: [String!]!): FormResult!
	updateCategory(id: String!, name: String!, description: String!, format: CategoryFormat!, clues: [ClueInput!]!): FormResult!

	# Play
	hostGame(boardId: String!): String!
	joinGame(gameId: String!): Void
	selectClue(gameId: String!, row: Int!, col: Int!): Void
	answerClue(gameId: String!): Void
	closeClue(gameId: String!): Void
}

# -------------
# Subscriptions
# -------------
type Subscription {
	# Play
	playGame(gameId: String!): Game!
}
